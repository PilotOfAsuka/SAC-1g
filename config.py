from func import days_since_last_watering
from modules.temp_module import get_mi_sensor_data
from modules.var_config import get_variables_from_json
from modules.numtotex import text_rost
from dotenv import load_dotenv
import os
from CONSTANTS import Box_device_address, Room_device_address

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

BOT_TOKEN = os.getenv("API")
variables = get_variables_from_json()


def light_night(light_day) -> int:
    try:
        night = 24 - light_day
        return night
    except TypeError:
        return 0


def get_data_sensor(sensor):
    if sensor.lower() == 'booba_kush':
        t, h, = 0, 0
        return t, h, 0, 0
    elif sensor.lower() == 'lizard_king':
        t, h, voltage = get_mi_sensor_data(Box_device_address)
        t2, h2, voltage2 = get_mi_sensor_data(Room_device_address)
        if t and h and t2 and h2:
            return t, h, t2, h2
        else:
            return 0, 0, 0, 0
    else:
        return 0, 0


def update_info(box) -> str:
    try:
        day_w = variables.get(box).get('date_of_watering')
        light = variables.get(box).get('light_on')
        wing = variables.get(box).get('wing_on')
        light_day = variables.get(box).get('sun_value')
        termo = variables.get(box).get('termo_on')
        name_of_sort = variables.get(box).get('name')
        name_of_udobrenie = variables.get(box).get('name_udobr')

        current_temp, air_hud, t2, h2 = get_data_sensor(box)

        days_w = days_since_last_watering(day_w)
        light_nigh = light_night(light_day)

        info_text = get_info_text(box=box, name_of_sort=name_of_sort, current_temp=current_temp,
                                  air_hud=air_hud, termo=termo, light=light, light_day=light_day, light_nigh=light_nigh,
                                  wing=wing, name_of_udobrenie=name_of_udobrenie, days_w=days_w, t2=t2, h2=h2)
        return info_text


    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}"


def get_info_text(box, name_of_sort, current_temp, air_hud, termo, light, light_day, light_nigh, wing, name_of_udobrenie, days_w, t2, h2) -> str:
    if box.lower() == 'booba_kush':
        harvest_day = variables.get(box).get("harvest_day")
        text_of_info = (f"\nüè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∞: {name_of_sort}"
                        f"\n–•–∞—Ä–≤–µ—Å—Ç {harvest_day} " if variables.get(box).get("harvest") is True else ""
                        f"\n"
                        f"\nüå°Ô∏è –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current_temp}¬∞C"
                        f"\n"
                        f"\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {air_hud}%"
                        f"\n"
                        f"\nüî• –û–±–æ–≥—Ä–µ–≤: {'–í–∫–ª—é—á–µ–Ω' if termo else '–í—ã–∫–ª—é—á–µ–Ω'}"
                        f"\n"
                        f"\n‚òÄÔ∏è –û—Å–≤–µ—â–µ–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if light else '–í—ã–∫–ª—é—á–µ–Ω–æ'}"
                        f"\n"
                        f"\nüåû –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Å–≤–µ—â–µ–Ω–∏—è {light_day} –¥–Ω—è/{light_nigh} –Ω–æ—á–∏ üåö"
                        f"\n"
                        f"\nüí® –û–±–¥—É–≤: {'–í–∫–ª—é—á–µ–Ω–æ' if wing else '–í—ã–∫–ª—é—á–µ–Ω–æ'}"
                        f"\n"
                        f"\nüìÖ –î–∞—Ç–∞ –ø–æ—Å–µ–≤–∞: {variables.get(box).get('date_of_grow')}"
                        f"\n"
                        f"\nüå±–í—Ä–µ–º—è —Ä–æ—Å—Ç–∞: {text_rost(days_since_last_watering(variables.get(box).get('date_of_grow')))}"
                        f"\n"
                        f"\nüè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è: {name_of_udobrenie}"
                        f"\n"
                        f"\nüíß –î–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª–∏–≤–∞: {days_w}")
        return text_of_info
    elif box.lower() == 'lizard_king':
        text_of_info = (f"\nüè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∞: {name_of_sort}"
                        f"\n"
                        f"\nüå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ø–∞—Ä–Ω–∏–∫–µ: {current_temp}¬∞C"
                        f"\nüå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏: {t2}¬∞C"
                        f"\nüå°Ô∏è –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {(t2+current_temp)/2}¬∞C"
                        f"\n"
                        f"\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤ –ø–∞—Ä–Ω–∏–∫–µ: {air_hud}%"
                        f"\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏: {h2}%"
                        f"\n"
                        f"\nüî• –û–±–æ–≥—Ä–µ–≤: {'–í–∫–ª—é—á–µ–Ω' if termo else '–í—ã–∫–ª—é—á–µ–Ω'}"
                        f"\n"
                        f"\n‚òÄÔ∏è –û—Å–≤–µ—â–µ–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if light else '–í—ã–∫–ª—é—á–µ–Ω–æ'}"
                        f"\n"
                        f"\nüìÖ –î–∞—Ç–∞ –∏–Ω–æ–∫—É–ª—è—Ü–∏–∏: {variables.get(box).get('date_of_grow')}"
                        f"\n"
                        f"\nüå± –° –º–æ–º–µ–Ω—Ç–∞ –∏–Ω–æ–∫—É–ª—è—Ü–∏–∏: {text_rost(days_since_last_watering(variables.get(box).get('date_of_grow')))}"
                        f"\n"
                        f"\nüè∑ –ö–µ–π–∫: {name_of_udobrenie}")
        return text_of_info
