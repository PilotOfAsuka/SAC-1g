from aiogram import F
from misc import dp
from aiogram.types import (Message, ReplyKeyboardMarkup,
                           KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery)
from aiogram.filters import Command
from aiogram.methods import GetChat
import func
import json
import config as cfg


def time_buttons():
    time_buttons_set = [[KeyboardButton(text=str(i * 4 + j + 1)) for j in range(4)] for i in range(6)]
    time_buttons_set.append([back_button])
    time_button = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=time_buttons_set)
    return time_button


# –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è user
def set_user_state(msg, state):
    user_id = str(msg.from_user.id)
    user_states[user_id] = state
    func.save_in_json(user_states, cfg.user_states_file)


def menu_generator(button_list, back_b=False):
    buttons = [[KeyboardButton(text=button)] for button in button_list]
    if back_b is not False:
        buttons.append([back_button])
    menu = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)
    return menu


# –°–ø–∏—Å–∫–∏ –∫–Ω–æ–ø–æ–∫
back_button = KeyboardButton(text="–ù–∞–∑–∞–¥")
back_button_test = [[KeyboardButton(text="–ù–∞–∑–∞–¥")]]
test_back = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=back_button_test)

main_menu_list = ["üåßÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–ª–∏–≤–∞ üåßÔ∏è", "üí° –ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Å–≤–µ—â–µ–Ω–∏—è üí°", "üí® –ö–æ–Ω—Ç—Ä–æ–ª—å –æ–±–¥—É–≤–∞ üí®",
                  "üî• –ö–æ–Ω—Ç—Ä–æ–ª—å –æ–±–æ–≥—Ä–µ–≤–∞ üî•", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è"]
water_menu_list = ["‚è≤Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–ª–∏–≤–∞ ‚è≤Ô∏è", "üíß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª-–≤–æ –≤–æ–¥—ã üíß", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–º–ø—ã ‚öôÔ∏è"]
light_menu_list = ["‚è≤Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è ‚è≤Ô∏è", "üí° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–ª—ã –æ—Å–≤–µ—â–µ–Ω–∏—è üí°"]
wing_menu_list = ["üí® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–ª—ã –æ–±–¥—É–≤–∞ üí®"]
temp_menu_list = ["‚è≤Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–æ–≥—Ä–µ–≤–∞ ‚è≤Ô∏è", "üå°Ô∏è O–±–æ–≥—Ä–µ–≤ –ø–æ –¥–∞—Ç—á–∏–∫—É üå°Ô∏è"]
user_button_list = ["üîÅ –û–±–Ω–æ–≤–∏—Ç—å üîÅ"]  # togo


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu_1 = menu_generator(main_menu_list)
in_water_menu = menu_generator(water_menu_list, back_b=True)
in_light_menu = menu_generator(light_menu_list, back_b=True)
in_wing_menu = menu_generator(wing_menu_list, back_b=True)
in_temp_menu = menu_generator(temp_menu_list, back_b=True)

info_buttons = [[InlineKeyboardButton(text=button, callback_data=button)] for button in user_button_list]
info_menu = InlineKeyboardMarkup(inline_keyboard=info_buttons)

# –°–ª–æ–≤–∞—Ä—å –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é user_state, text, menu
main_menu_actions = {
    main_menu_list[0]: ("water", "üåßÔ∏è –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–ª–∏–≤–æ–º:", in_water_menu),
    main_menu_list[1]: ("light", "üí° –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–≤–µ—Ç–∞:", in_light_menu),
    main_menu_list[2]: ("wing", "üí® –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–±–¥—É–≤–∞:", in_wing_menu),
    main_menu_list[3]: ("temp", "üî• –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–±–æ–≥—Ä–µ–≤–æ–º:", in_temp_menu),
    main_menu_list[4]: ("info", cfg.info_text, info_menu),
}

water_menu_actions = {
    water_menu_list[0]: ("water_set", "‚è≤Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –ß–∞—Å–∞—Ö:", time_buttons()),
    water_menu_list[1]: ("water_set", "üíß –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –≤–æ–¥—ã –≤ –º–ª:", test_back),
    water_menu_list[2]: ("water_set", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–º–ø—ã:", test_back),
}

light_menu_actions = {
    light_menu_list[0]: ("light_set", "‚è≤Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ '–î–Ω—è':", time_buttons()),
    light_menu_list[1]: ("light_set", "üí° –£–∫–∞–∂–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç 0 –¥–æ 100:", test_back)
}

wing_menu_actions = {
    wing_menu_list[0]: ("wing_set", "üí® –£–∫–∞–∂–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç 0 –¥–æ 100:", test_back)
}

temp_menu_actions = {
    temp_menu_list[0]: ("temp_set", "‚è≤Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –æ–±–æ–≥—Ä–µ–≤–∞:", test_back),
    temp_menu_list[1]: ("temp_set", "üå°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±–æ–≥—Ä–µ–≤ –ø–æ –¥–∞—Ç—á–∏–∫—É", test_back)
}


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
try:
    with open(cfg.user_states_file, 'r') as file_user_states:
        user_states = json.load(file_user_states)
        print(f"{cfg.user_states_file} - loading successful")
except FileNotFoundError:
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
    user_states = {}
    print(f"{cfg.user_states_file} not found, we make a new :)")


@dp.message(Command("start"))
async def start_handler(msg: Message):
    # user_id = str(msg.from_user.id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await msg.answer(cfg.start_text, reply_markup=main_menu_1)
    await msg.answer(cfg.info_text, reply_markup=info_menu)
    await msg.delete()
    set_user_state(msg, "idle")


async def handle_menu(msg, menu_actions):
    selected_option = menu_actions.get(msg.text)
    if selected_option:
        user_state, response_text, reply_markup = selected_option
        set_user_state(msg, user_state)
        await msg.answer(response_text, reply_markup=reply_markup)
    else:
        await msg.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è –≤ –º–µ–Ω—é.")


# –ò–≤–µ–Ω—Ç—ã –ú–∞–∏–Ω –º–µ–Ω—é
@dp.message(lambda message: message.text in main_menu_list)
async def main_menu(msg: Message):
    await handle_menu(msg, main_menu_actions)


# –ò–≤–µ–Ω—Ç—ã water_menu
@dp.message(lambda message: message.text in water_menu_list)
async def water_menu(msg: Message):
    await handle_menu(msg, water_menu_actions)


# –ò–≤–µ–Ω—Ç—ã light_menu
@dp.message(lambda message: message.text in light_menu_list)
async def light_menu(msg: Message):
    await handle_menu(msg, light_menu_actions)


# –ò–≤–µ–Ω—Ç—ã wing_menu
@dp.message(lambda message: message.text in wing_menu_list)
async def wing_menu(msg: Message):
    await handle_menu(msg, wing_menu_actions)


# –ò–≤–µ–Ω—Ç—ã temp_menu
@dp.message(lambda message: message.text in temp_menu_list)
async def temp_menu(msg: Message):
    await handle_menu(msg, temp_menu_actions)


# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å
@dp.callback_query(F.data == user_button_list[0])
async def send_random_value(callback: CallbackQuery):
    await callback.message.answer(cfg.info_text, reply_markup=info_menu)


# –ò–≤–µ–Ω—Ç—ã –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
@dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def back(msg: Message):
    user_id = str(msg.from_user.id)
    if user_states.get(user_id) in ["light", "water", "wing", "temp"]:
        set_user_state(msg, "idle")
        await msg.answer("üè° –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üè°", reply_markup=main_menu_1)
    elif user_states.get(user_id) in ["water_set"]:
        set_user_state(msg, "water")
        await msg.answer("üåßÔ∏è –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–ª–∏–≤–æ–º:", reply_markup=in_water_menu)
    elif user_states.get(user_id) in ["light_set"]:
        set_user_state(msg, "light")
        await msg.answer("üí° –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–≤–µ—Ç–∞:", reply_markup=in_light_menu)
    elif user_states.get(user_id) in ["wing_set"]:
        set_user_state(msg, "wing")
        await msg.answer("üí® –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–±–¥—É–≤–∞:", reply_markup=in_wing_menu)
    elif user_states.get(user_id) in ["temp_set"]:
        set_user_state(msg, "temp")
        await msg.answer("üî• –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–±–æ–≥—Ä–µ–≤–æ–º:", reply_markup=in_temp_menu)
    else:
        await msg.answer("–ù–∞–∑–∞–¥ –ø—É—Ç–∏ –Ω–µ—Ç", reply_markup=main_menu_1)


@dp.message()
async def message_handler(msg: Message):
    # user_name = msg.from_user.username
    # user_id = str(msg.from_user.id)
    if msg.text is not None:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é")
