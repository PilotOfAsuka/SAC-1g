from aiogram import F

from misc import dp
from aiogram.types import (Message, CallbackQuery)
from aiogram.filters import Command
from menu import *


def watering():
    date = func.get_date()
    variables["dates"] = date
    func.save_in_json(variables, 'variables.json')


def save_var(var, value):
    variables[var] = value
    func.save_in_json(variables, 'variables.json')


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
try:
    with open('variables.json', 'r') as file_var:
        variables = json.load(file_var)
        print(f"variables.json - loading successful")
except FileNotFoundError:
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
    variables = {'dates': "2024-02-17", 'light_on': False, 'wing_on': False, 'sun_value': 0, 'water_value': 0, 'termo_on': False}
    print(f"variables.json not found, we make a new :)")


day_value_chache = 0
water_value_chache = 0


@dp.message(Command("start"))
async def start_handler(msg: Message):
    # user_id = str(msg.from_user.id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await msg.delete()
    await msg.answer(cfg.start_text, reply_markup=main_menu_1)
    await msg.answer(cfg.update_info(variables['dates'],
                                     variables['light_on'],
                                     variables['wing_on'],
                                     variables['sun_value'],
                                     variables['termo_on']), reply_markup=info_menu)
    set_user_state(msg, "idle")


async def handle_menu(msg, menu_actions):
    selected_option = menu_actions.get(msg.text)
    if selected_option:
        user_state, response_text, reply_markup = selected_option
        set_user_state(msg, user_state)
        await msg.answer(response_text, reply_markup=reply_markup)
    else:
        await msg.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è –≤ –º–µ–Ω—é.")


def create_menu_handler(menu_list, menu_actions):
    @dp.message(lambda message: message.text in menu_list)
    async def create_menu(msg: Message):
        await handle_menu(msg, menu_actions)


# –ò–≤–µ–Ω—Ç—ã –ú–∞–∏–Ω –º–µ–Ω—é
@dp.message(lambda message: message.text in main_menu_list)
async def main_menu(msg: Message):
    if msg.text == main_menu_list[4]:
        await msg.answer(cfg.update_info(variables['dates'],
                                         variables['light_on'],
                                         variables['wing_on'],
                                         variables['sun_value'],
                                         variables['termo_on']), reply_markup=info_menu)
    else:
        await handle_menu(msg, main_menu_actions)


# –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª–∏–≤–æ–≤
@dp.message(lambda message: message.text == water_menu_list[2])
async def get_history(msg: Message):
    await msg.answer(func.load_from_file())


@dp.message(lambda message: message.text in light_set_menu_list)  # –í–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞
async def light_on_menu(msg: Message):
    user_id = str(msg.from_user.id)
    if user_states.get(user_id) == "light_set":
        if msg.text == light_set_menu_list[0]:
            if variables.get('light_on') is True:
                save_var('light_on', False)
                set_user_state(msg, "idle")
                await msg.answer('üí°–õ–∞–º–ø–∞ –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu_1)
            else:
                save_var('light_on', True)
                set_user_state(msg, "idle")
                await msg.answer('üí°–õ–∞–º–ø–∞ –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu_1)
    pass


@dp.message(lambda message: message.text in wing_menu_list)  # –í–∫–ª—é—á–µ–Ω–∏–µ –æ–±–¥—É–≤–∞
async def wing_on_menu(msg: Message):
    user_id = str(msg.from_user.id)
    if user_states.get(user_id) == "wing":
        if msg.text == wing_menu_list[0]:
            if variables.get('wing_on') is True:
                save_var("wing_on", False)
                set_user_state(msg, "idle")
                await msg.answer('üí® –û–±–¥—É–≤ –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üí®', reply_markup=main_menu_1)
            else:
                save_var("wing_on", True)
                set_user_state(msg, "idle")
                await msg.answer('üí® –û–±–¥—É–≤ –±—ã–ª –≤–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üí®', reply_markup=main_menu_1)
    pass


@dp.message(lambda message: message.text in temp_menu_list)  # –í–∫–ª—é—á–µ–Ω–∏–µ –æ–±–æ–≥—Ä–µ–≤–∞
async def termo_on_menu(msg: Message):
    user_id = str(msg.from_user.id)
    if user_states.get(user_id) == "temp":
        if msg.text == temp_menu_list[0]:
            if variables.get('termo_on') is True:
                save_var("termo_on", False)
                set_user_state(msg, "idle")
                await msg.answer('üî• –û–±–æ–≥—Ä–µ–≤ –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üî•', reply_markup=main_menu_1)
            else:
                save_var("termo_on", True)
                set_user_state(msg, "idle")
                await msg.answer('üî• –û–±–æ–≥—Ä–µ–≤ –±—ã–ª –≤–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üî•', reply_markup=main_menu_1)
    pass


# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å
@dp.callback_query(F.data == user_button_list[0])
async def send_random_value(callback: CallbackQuery):
    await callback.message.answer(cfg.update_info(variables['dates'],
                                                  variables['light_on'],
                                                  variables['wing_on'],
                                                  variables['sun_value'],
                                                  variables['termo_on']), reply_markup=info_menu)


# –ò–≤–µ–Ω—Ç—ã –¥–∞ –∏ –Ω–µ—Ç
@dp.message(lambda message: message.text in check_buttons_list)
async def water_set_menu(msg: Message):
    user_id = str(msg.from_user.id)
    if user_states.get(user_id) == "water_set_w":
        if msg.text == check_buttons_list[0]:
            await msg.answer("üåßÔ∏è –£—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω –ø–æ–ª–∏–≤! üåßÔ∏è\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_1)
            watering()
            save_var("water_value", water_value_chache)
            func.write_to_file(variables['water_value'])
            set_user_state(msg, "idle")

        elif msg.text == check_buttons_list[1]:
            await msg.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å! ‚ùå\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=main_menu_1)

            set_user_state(msg, "idle")
    elif user_states.get(user_id) == "light_set_day":
        if msg.text == check_buttons_list[0]:
            save_var("sun_value", day_value_chache)
            await msg.answer("üí° –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞–±–æ—Ç—ã –ª–∞–º–ø—ã! üí°\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                             reply_markup=main_menu_1)

            set_user_state(msg, "idle")
        elif msg.text == check_buttons_list[1]:
            await msg.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å! ‚ùå\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_1)
            set_user_state(msg, "idle")
    else:
        await msg.answer("123")


# –ò–≤–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ–Ω—é
create_menu_handler(water_menu_list, water_menu_actions)
create_menu_handler(light_menu_list, light_menu_actions)


# –ò–≤–µ–Ω—Ç—ã –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
@dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def back(msg: Message):
    user_id = str(msg.from_user.id)
    if user_states.get(user_id) in ["light", "water", "wing", "temp"]:
        set_user_state(msg, "idle")
        await msg.answer("üè° –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üè°", reply_markup=main_menu_1)
    elif user_states.get(user_id) in ["water_set", "water_set_w"]:
        set_user_state(msg, "water")
        await msg.answer("üåßÔ∏è –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–ª–∏–≤–æ–º:", reply_markup=in_water_menu)
    elif user_states.get(user_id) in ["light_set", "light_set_day"]:
        set_user_state(msg, "light")
        await msg.answer("üí° –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–≤–µ—Ç–∞:", reply_markup=in_light_menu)
    elif user_states.get(user_id) in ["temp_set"]:
        set_user_state(msg, "temp")
        await msg.answer("üî• –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–±–æ–≥—Ä–µ–≤–æ–º:", reply_markup=in_temp_menu)
    else:
        await msg.answer("–ù–∞–∑–∞–¥ –ø—É—Ç–∏ –Ω–µ—Ç", reply_markup=main_menu_1)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@dp.message()
async def message_handler(msg: Message):
    global water_value_chache
    global day_value_chache
    # user_name = msg.from_user.username
    user_id = str(msg.from_user.id)
    if msg.text is not None:
        if user_states.get(user_id) == "water_set_w":
            try:
                water_value_chache = int(msg.text)
                await msg.answer(f"üåßÔ∏è –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–ª–∏–≤ –Ω–∞ {water_value_chache} –ª–∏—Ç—Ä–æ–≤ üåßÔ∏è",
                                 reply_markup=check_menu)

            except ValueError:
                await msg.answer("‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑ ‚ùå")
            pass
        elif user_states.get(user_id) == "light_set_day":
            try:
                day_value_chache = int(msg.text)
                await msg.answer(f"üåßÔ∏è –í—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å –Ω–∞ {day_value_chache} —á–∞—Å–æ–≤Ô∏è", reply_markup=check_menu)
            except ValueError:
                await msg.answer("‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑ ‚ùå")

        else:
            await msg.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é ‚ö†Ô∏è")
