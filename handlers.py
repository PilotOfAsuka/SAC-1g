from aiogram import F

from misc import dp, bot
from aiogram.types import (Message, CallbackQuery)
from aiogram.filters import Command
from menu import *

from modules import admin_panael, var_config

udr_value_chache = 0
day_value_chache = 0
water_value_chache = 0
sort_name = None
udr_name = None
date_of_grow = None

@dp.message(Command("id"))
async def get_chat_id(msg: Message):
    chat_id = str(msg.chat.id)
    await msg.answer("–ò–î –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: " + chat_id)


@dp.message(Command("my_id"))
async def get_user_id(msg: Message):
    user_id = str(msg.from_user.id)
    await msg.answer("–¢–≤–æ–π ID: " + user_id)


@dp.message(Command("start"))
@admin_panael.check_admins
async def start_handler(msg: Message):
    user_id = str(msg.from_user.id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await msg.delete()
    await msg.answer(cfg.start_text)
    if user_box.get(user_id) is None:
        set_user_state(msg, "set_box")
        await msg.answer(text=f"–ü—Ä–∏–≤–µ—Ç {msg.from_user.first_name}, –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –±–æ–∫—Å:", reply_markup=box_menu)
    else:
        await msg.answer(cfg.update_info(box=user_box.get(user_id)), reply_markup=info_menu)
        await msg.answer(text=f"–ü—Ä–∏–≤–µ—Ç {msg.from_user.first_name} –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu_1)
        set_user_state(msg, "idle")


async def handle_menu(msg, menu_actions):
    selected_option = menu_actions.get(msg.text)
    if user_states.get(str(msg.from_user.id)) is not None:
        if selected_option:
            user_state, response_text, reply_markup = selected_option
            set_user_state(msg, user_state)
            await msg.answer(response_text, reply_markup=reply_markup)
        else:
            await msg.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è –≤ –º–µ–Ω—é.")
    else:
        await msg.answer(text="–ö–∞–∂–µ—Ç—Å—è –±—ã–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")


def create_menu_handler(menu_list, menu_actions):
    @dp.message(lambda message: message.text in menu_list)
    @admin_panael.check_admins
    async def create_menu(msg: Message):
        await handle_menu(msg, menu_actions)


# –ò–≤–µ–Ω—Ç—ã –ú–∞–∏–Ω –º–µ–Ω—é
@dp.message(lambda message: message.text in main_menu_list)
@admin_panael.check_admins
async def main_menu(msg: Message):
    user_id = str(msg.from_user.id)
    if user_states.get(user_id) is not None:
        if msg.text != main_menu_list[4]:
            await handle_menu(msg, main_menu_actions)
        else:
            await msg.answer(cfg.update_info(box=user_box.get(user_id)), reply_markup=info_menu)
    else:
        await msg.answer(text="–ö–∞–∂–µ—Ç—Å—è –±—ã–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")


# –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª–∏–≤–æ–≤
@dp.message(lambda message: message.text == water_menu_list[3])
@admin_panael.check_admins
async def get_history(msg: Message):
    user_id = str(msg.from_user.id)
    await msg.answer(func.load_from_file(box=user_box.get(user_id)))


@dp.message(lambda message: message.text in light_set_menu_list)  # –í–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞
@admin_panael.check_admins
async def light_on_menu(msg: Message):
    user_id = str(msg.from_user.id)
    if user_states.get(user_id) == "light_set":
        if msg.text == light_set_menu_list[0]:
            if cfg.variables.get('light_on') is True:
                var_config.save_var(variables=cfg.variables, var='light_on', value=False, box=user_box.get(user_id))
                set_user_state(msg, "idle")
                await msg.answer('üí°–õ–∞–º–ø–∞ –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu_1)
            else:
                var_config.save_var(variables=cfg.variables, var='light_on', value=True, box=user_box.get(user_id))
                set_user_state(msg, "idle")
                await msg.answer('üí°–õ–∞–º–ø–∞ –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu_1)
    pass


@dp.message(lambda message: message.text in wing_menu_list)  # –í–∫–ª—é—á–µ–Ω–∏–µ –æ–±–¥—É–≤–∞
@admin_panael.check_admins
async def wing_on_menu(msg: Message):
    user_id = str(msg.from_user.id)
    if user_states.get(user_id) == "wing":
        if msg.text == wing_menu_list[0]:
            if cfg.variables.get('wing_on') is True:
                var_config.save_var(variables=cfg.variables, var="wing_on", value=False, box=user_box.get(user_id))
                set_user_state(msg, "idle")
                await msg.answer('üí® –û–±–¥—É–≤ –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üí®', reply_markup=main_menu_1)
            else:
                var_config.save_var(variables=cfg.variables, var="wing_on", value=True, box=user_box.get(user_id))
                set_user_state(msg, "idle")
                await msg.answer('üí® –û–±–¥—É–≤ –±—ã–ª –≤–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üí®', reply_markup=main_menu_1)
    pass


@dp.message(lambda message: message.text in temp_menu_list)  # –í–∫–ª—é—á–µ–Ω–∏–µ –æ–±–æ–≥—Ä–µ–≤–∞
@admin_panael.check_admins
async def termo_on_menu(msg: Message):
    user_id = str(msg.from_user.id)
    if user_states.get(user_id) == "temp":
        if msg.text == temp_menu_list[0]:
            if cfg.variables.get('termo_on') is True:
                var_config.save_var(variables=cfg.variables, var="termo_on", value=False, box=user_box.get(user_id))
                set_user_state(msg, "idle")
                await msg.answer('üî• –û–±–æ–≥—Ä–µ–≤ –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üî•', reply_markup=main_menu_1)
            else:
                var_config.save_var(variables=cfg.variables, var="termo_on", value=True, box=user_box.get(user_id))
                set_user_state(msg, "idle")
                await msg.answer('üî• –û–±–æ–≥—Ä–µ–≤ –±—ã–ª –≤–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üî•', reply_markup=main_menu_1)
    pass


# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å
@dp.callback_query(F.data == user_button_list[0])
@admin_panael.check_admins
async def send_update_value(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    await callback.message.answer(cfg.update_info(box=user_box.get(user_id)), reply_markup=info_menu)


# –ò–≤–µ–Ω—Ç—ã –¥–∞ –∏ –Ω–µ—Ç
@dp.message(lambda message: message.text in check_buttons_list)
@admin_panael.check_admins
async def water_set_menu(msg: Message):
    user_id = str(msg.from_user.id)
    if user_states.get(user_id) == "water_set_w":
        if msg.text == check_buttons_list[0]:
            await msg.answer("üåßÔ∏è –£—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω –ø–æ–ª–∏–≤! üåßÔ∏è\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_1)
            await bot.send_message(chat_id=5848061277,
                                   text=f"–°–æ–≤–µ—Ä—à–µ–Ω –ø–æ–ª–∏–≤ –Ω–∞ {water_value_chache} –ª–∏—Ç—Ä–∞")  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–°
            var_config.save_var(variables=cfg.variables, var="date_of_watering", value=func.get_date(), box=user_box.get(user_id))
            var_config.save_var(variables=cfg.variables, var="water_value", value=water_value_chache, box=user_box.get(user_id))
            func.write_to_file(cfg.variables[user_box.get(user_id)]['water_value'], box=user_box.get(user_id))
            set_user_state(msg, "idle")

        elif msg.text == check_buttons_list[1]:
            await msg.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å! ‚ùå\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=main_menu_1)
            set_user_state(msg, "idle")

    elif user_states.get(user_id) == "water_set_udr":
        if msg.text == check_buttons_list[0]:
            await msg.answer("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É–¥–æ–±—Ä–µ–Ω–∏–µÔ∏è\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_1)
            var_config.save_var(variables=cfg.variables, var="udr_value", value=udr_value_chache, box=user_box.get(user_id))
            func.write_to_file(cfg.variables[user_box.get(user_id)]['udr_value'],box=user_box.get(user_id), udobrenie=True)
            set_user_state(msg, "idle")

        elif msg.text == check_buttons_list[1]:
            await msg.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å! ‚ùå\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=main_menu_1)
            set_user_state(msg, "idle")
    elif user_states.get(user_id) == "light_set_day":
        if msg.text == check_buttons_list[0]:
            var_config.save_var(variables=cfg.variables, var="sun_value", value=day_value_chache, box=user_box.get(user_id))
            await msg.answer("üí° –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞–±–æ—Ç—ã –ª–∞–º–ø—ã! üí°\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                             reply_markup=main_menu_1)
            set_user_state(msg, "idle")

        elif msg.text == check_buttons_list[1]:
            await msg.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å! ‚ùå\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_1)
            set_user_state(msg, "idle")

    elif user_states.get(user_id) == "name_set":
        if msg.text == check_buttons_list[0]:
            var_config.save_var(variables=cfg.variables, var="name", value=sort_name, box=user_box.get(user_id))
            await msg.answer("üí° –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ! üí°\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                             reply_markup=main_menu_1)
            set_user_state(msg, "idle")
        elif msg.text == check_buttons_list[1]:
            await msg.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å! ‚ùå\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_1)
            set_user_state(msg, "idle")

    elif user_states.get(user_id) == "udobr_set":
        if msg.text == check_buttons_list[0]:
            var_config.save_var(variables=cfg.variables, var="name_udobr", value=udr_name, box=user_box.get(user_id))
            await msg.answer("üí° –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ! üí°\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                             reply_markup=main_menu_1)
            set_user_state(msg, "idle")
        elif msg.text == check_buttons_list[1]:
            await msg.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å! ‚ùå\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_1)
            set_user_state(msg, "idle")

    elif user_states.get(user_id) == "set_date":
        if msg.text == check_buttons_list[0]:
            var_config.save_var(variables=cfg.variables, var="date_of_grow", value=date_of_grow, box=user_box.get(user_id))
            await msg.answer(text="–£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –¥–∞—Ç–∞.\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_1)
        elif msg.text == check_buttons_list[1]:
            await msg.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å! ‚ùå\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_1)
            set_user_state(msg, "idle")

    else:
        await msg.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤. üîÑ\n–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=main_menu_1)


# –ò–≤–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ–Ω—é
create_menu_handler(water_menu_list, water_menu_actions)
create_menu_handler(light_menu_list, light_menu_actions)
create_menu_handler(setting_button_list, settings_menu_actions)


@dp.message(lambda message: message.text in box_list)  # –í—ã–±–æ—Ä –±–æ–∫—Å–∞
@admin_panael.check_admins
async def set_box(msg: Message):
    user_id = str(msg.from_user.id)
    if user_states.get(user_id) == 'set_box':
        set_user_box(msg, msg.text)
        await msg.answer(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {user_box.get(user_id)}, –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:", reply_markup=main_menu_1)
        set_user_state(msg, "idle")
        pass
    pass


# –ò–≤–µ–Ω—Ç—ã –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
@admin_panael.check_admins
async def back(msg: Message):
    user_id = str(msg.from_user.id)
    if user_states.get(user_id) in ["light", "water", "wing", "temp", "in_settings"]:
        set_user_state(msg, "idle")
        await msg.answer("üè° –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üè°", reply_markup=main_menu_1)

    elif user_states.get(user_id) in ["water_set", "water_set_w", "water_set_udr"]:
        set_user_state(msg, "water")
        await msg.answer("üåßÔ∏è –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–ª–∏–≤–æ–º:", reply_markup=in_water_menu)

    elif user_states.get(user_id) in ["light_set", "light_set_day"]:
        set_user_state(msg, "light")
        await msg.answer("üí° –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–≤–µ—Ç–∞:", reply_markup=in_light_menu)

    elif user_states.get(user_id) in ["temp_set"]:
        set_user_state(msg, "temp")
        await msg.answer("üî• –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–±–æ–≥—Ä–µ–≤–æ–º:", reply_markup=in_temp_menu)

    elif user_states.get(user_id) in ["set_box"]:
        await msg.answer(text="–ù–∞–∑–∞–¥ –ø—É—Ç–∏ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –±–æ–∫—Å:")

    else:
        await msg.answer("!–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=main_menu_1)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@dp.message()
@admin_panael.check_admins
async def message_handler(msg: Message):
    global water_value_chache
    global day_value_chache
    global sort_name
    global udr_name
    global udr_value_chache
    global date_of_grow

    user_id = str(msg.from_user.id)
    if msg.text is not None:
        if user_states.get(user_id) == "water_set_w":
            try:
                water_value_chache = int(msg.text)
                await msg.answer(f"üåßÔ∏è –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–ª–∏–≤ –Ω–∞ {water_value_chache} –ª–∏—Ç—Ä–æ–≤ üåßÔ∏è",
                                 reply_markup=check_menu)
            except ValueError:
                await msg.answer("‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑ ‚ùå")
            pass

        elif user_states.get(user_id) == "water_set_udr":
            try:
                udr_value_chache = float(msg.text)
                await msg.answer(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —É–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ {udr_value_chache} –ª–∏—Ç—Ä–æ–≤",
                                 reply_markup=check_menu)
            except ValueError:
                await msg.answer("‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑ ‚ùå")
            pass

        elif user_states.get(user_id) == "light_set_day":
            try:
                day_value_chache = int(msg.text)
                await msg.answer(f"üåßÔ∏è –í—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å –Ω–∞ {day_value_chache} —á–∞—Å–æ–≤Ô∏è", reply_markup=check_menu)
            except ValueError:
                await msg.answer("‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑ ‚ùå")

        elif user_states.get(user_id) == "name_set":
            sort_name = str(msg.text)
            await msg.answer(f"‚ùì –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –∏–º—è —Å {cfg.variables.get('name')} –Ω–∞ {msg.text}? ‚ùì", reply_markup=check_menu)

        elif user_states.get(user_id) == "udobr_set":
            udr_name = str(msg.text)
            await msg.answer(f"‚ùì –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è —Å {cfg.variables.get('name_udobr')} –Ω–∞ {msg.text}? ‚ùì", reply_markup=check_menu)

        elif user_states.get(user_id) == "set_date":
            date_of_grow = str(msg.text)
            await msg.answer(f"‚ùì –í—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –Ω–∞ {msg.text}? ‚ùì ", reply_markup=check_menu)

        elif user_states.get(user_id) is None:
            await msg.answer(text="–ö–∞–∂–µ—Ç—Å—è –±—ã–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")

        else:
            await msg.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é ‚ö†Ô∏è")

    else:
        await msg.answer(text="‚ùó –í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏ ‚ùó")
