from aiogram.types import (ReplyKeyboardMarkup,
                           KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton)
import config as cfg
import json
import func


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_json(name):
    try:
        with open(name, 'r') as file_user:
            file = json.load(file_user)
            print(f"{name} - loading successful")
            return file
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        file = {}
        print(f"{name} not found, we make a new :)")
        return file


user_states = load_json(cfg.user_states_file)
user_box = load_json(cfg.user_box_file)


def time_buttons():
    back_button = KeyboardButton(text="–ù–∞–∑–∞–¥")
    time_buttons_set = [[KeyboardButton(text=str(i * 4 + j + 1)) for j in range(4)] for i in range(6)]
    time_buttons_set.append([back_button])
    time_button = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=time_buttons_set)
    return time_button


def test_back():
    back_button_test = [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]]
    t_b = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=back_button_test)
    return t_b


# –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è user
def set_user_state(msg, state):
    user_id = str(msg.from_user.id)
    user_states[user_id] = state
    func.save_in_json(user_states, cfg.user_states_file)


def set_user_box(msg, box):
    user_id = str(msg.from_user.id)
    user_box[user_id] = box
    func.save_in_json(user_box, cfg.user_box_file)


def menu_generator(button_list, back_b=False):
    back_button = KeyboardButton(text="üîô –ù–∞–∑–∞–¥")
    buttons = [[KeyboardButton(text=button)] for button in button_list]
    if back_b is not False:
        buttons.append([back_button])
    menu = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)
    return menu


# –°–ø–∏—Å–∫–∏ –∫–Ω–æ–ø–æ–∫
# —Å–ø–∏—Å–æ–∫ –±–æ–∫—Å–æ–≤
box_list = ['Booba_kush', 'Lizard_king']

main_menu_list = ["üåßÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–ª–∏–≤–∞ üåßÔ∏è", "üí° –ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Å–≤–µ—â–µ–Ω–∏—è üí°", "üí® –ö–æ–Ω—Ç—Ä–æ–ª—å –æ–±–¥—É–≤–∞ üí®",
                  "üî• –ö–æ–Ω—Ç—Ä–æ–ª—å –æ–±–æ–≥—Ä–µ–≤–∞ üî•", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è", "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è"]

water_menu_list = ["üíß –°–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–ª–∏–≤ üíß", "üå± –î–æ–±–∞–≤–∏—Ç—å —É–¥–æ–±—Ä–µ–Ω–∏–µ üå±",
                   "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–º–ø—ã ‚öôÔ∏è", "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª–∏–≤–æ–≤ –∏ —É–¥–æ–±—Ä–µ–Ω–∏–π üåßÔ∏è"]

light_menu_list = ["‚è≤Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è ‚è≤Ô∏è", "üí° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∞–º–ø–æ–π üí°"]
light_set_menu_list = ["üí°–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ üí°", "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ—â–Ω–æ—Å—Ç–∏ ‚öôÔ∏è"]

wing_menu_list = ["‚öôÔ∏è–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ–±–¥—É–≤–∞‚öôÔ∏è"]

temp_menu_list = ["‚öôÔ∏è–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ–±–æ–≥—Ä–µ–≤–∞‚öôÔ∏è"]

user_button_list = ["üîÅ –û–±–Ω–æ–≤–∏—Ç—å üîÅ"]  # togo

setting_button_list = ['üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', 'üåø –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è', 'üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–µ–≤–∞', '–í–´–ë–†–ê–¢–¨ –ë–û–ö–°']


check_buttons_list = ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
box_menu = menu_generator(box_list, back_b=True)

main_menu_1 = menu_generator(main_menu_list)  # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
in_water_menu = menu_generator(water_menu_list, back_b=True)  # –º–µ–Ω—é –ø–æ–ª–∏–≤–∞
in_light_menu = menu_generator(light_menu_list, back_b=True)  # –º–µ–Ω—é —Å–≤–µ—Ç–∞
in_light_set_menu = menu_generator(light_set_menu_list, back_b=True)

in_wing_menu = menu_generator(wing_menu_list, back_b=True)  # –º–µ–Ω—é –æ–±–¥—É–≤–∞
in_temp_menu = menu_generator(temp_menu_list, back_b=True)  # –º–µ–Ω—é –æ–±–æ–≥—Ä–µ–≤–∞

# –ö–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–∞–±–ª–æ
info_buttons = [[InlineKeyboardButton(text=button, callback_data=button)] for button in user_button_list]
info_menu = InlineKeyboardMarkup(inline_keyboard=info_buttons)
# –ö–Ω–æ–ø–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
settings_menu = menu_generator(setting_button_list, back_b=True)

# –ö–Ω–æ–ø–∫–∏ –¥–∞ –Ω–µ—Ç
check_menu = menu_generator(check_buttons_list)


# –°–ª–æ–≤–∞—Ä—å –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é user_state, text, menu
main_menu_actions = {
    main_menu_list[0]: ("water", "üåßÔ∏è –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–ª–∏–≤–æ–º:", in_water_menu),
    main_menu_list[1]: ("light", "üí° –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–≤–µ—Ç–∞:", in_light_menu),
    main_menu_list[2]: ("wing", "üí® –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–±–¥—É–≤–∞:", in_wing_menu),
    main_menu_list[3]: ("temp", "üî• –í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–±–æ–≥—Ä–µ–≤–æ–º:", in_temp_menu),
    main_menu_list[5]: ("in_settings", "‚öôÔ∏è –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:", settings_menu)

}

water_menu_actions = {
    water_menu_list[0]: ("water_set_w", "üíß –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –≤–æ–¥—ã –≤ –ª–∏—Ç—Ä–∞—Ö:", test_back()),
    water_menu_list[1]: ("water_set_udr", "–í–≤–µ–¥–∏—Ç–µ –∫–æ-–≤–æ —É–¥–æ–±—Ä–µ–Ω–∏—è –≤ –ª–∏—Ç—Ä–∞—Ö", test_back()),
    water_menu_list[2]: ("water_set", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–º–ø—ã:", test_back()),
}

light_menu_actions = {
    light_menu_list[0]: ("light_set_day", "‚è≤Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ '–î–Ω—è':", time_buttons()),
    light_menu_list[1]: ("light_set", "üí° –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø–æ–π:", in_light_set_menu)
}

settings_menu_actions = {
    setting_button_list[0]: ('name_set', "üë§ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è", test_back()),
    setting_button_list[1]: ('udobr_set', "üåø –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ —É–¥–æ–±—Ä–µ–Ω–∏–µ", test_back()),
    setting_button_list[2]: ('set_date', "üìÖ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –ø–æ—Å–µ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ GGGG-MM-DD \n–ü—Ä–∏–º–µ—Ä 2024-04-10",
                             test_back()),
    setting_button_list[3]: ('set_box', "–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–∫—Å:", box_menu)
}
